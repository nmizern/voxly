services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: voxly-postgres
    environment:
      POSTGRES_DB: voxly
      POSTGRES_USER: voxly_user
      POSTGRES_PASSWORD: voxly_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voxly_user -d voxly"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - voxly-network

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: voxly-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: voxly
      RABBITMQ_DEFAULT_PASS: voxly_password
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - voxly-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: voxly-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - voxly-network
    command: redis-server --appendonly yes

  # Voxly Bot Service
  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    container_name: voxly-bot
    environment:
      # Database
      DATABASE_URL: "postgres://voxly_user:voxly_password@postgres:5432/voxly?sslmode=disable"
      
      # Telegram
      TELEGRAM_BOT_TOKEN: "${TELEGRAM_BOT_TOKEN}"
      
      # RabbitMQ
      RABBITMQ_URL: "amqp://voxly:voxly_password@rabbitmq:5672/"
      
      # Redis
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
      
      # Yandex Cloud
      YANDEX_API_KEY: "${YANDEX_API_KEY}"
      YANDEX_FOLDER_ID: "${YANDEX_FOLDER_ID}"
      
      # S3 Storage
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      S3_BUCKET: "${S3_BUCKET}"
      
      # App settings
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - voxly-network
    volumes:
      - ./configs:/app/configs:ro

  # Voxly Worker Service
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: voxly-worker
    environment:
      # Database
      DATABASE_URL: "postgres://voxly_user:voxly_password@postgres:5432/voxly?sslmode=disable"
      
      # RabbitMQ
      RABBITMQ_URL: "amqp://voxly:voxly_password@rabbitmq:5672/"
      
      # Redis
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
      
      # Yandex Cloud
      YANDEX_API_KEY: "${YANDEX_API_KEY}"
      YANDEX_FOLDER_ID: "${YANDEX_FOLDER_ID}"
      
      # S3 Storage
      S3_ENDPOINT: "${S3_ENDPOINT}"
      S3_ACCESS_KEY: "${S3_ACCESS_KEY}"
      S3_SECRET_KEY: "${S3_SECRET_KEY}"
      S3_BUCKET: "${S3_BUCKET}"
      
      # App settings
      DEBUG: "true"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - voxly-network
    volumes:
      - ./configs:/app/configs:ro


volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  voxly-network:
    driver: bridge